#Imports BaseModel from Pydantic.
#BaseModel is used to define data schemas with validation for request/response bodies.
from pydantic import BaseModel
#Imports the date type from Python's datetime module. Used to validate and represent date fields, like due_date
from datetime import date

#Defines a base schema for a task. All other schemas will inherit from this
#fields expected in a task:
#title: must be a string.
#description: must be a string.
#due_date: must be a valid date.
#status: optional string; defaults to "pending" if not provided.
class TaskBase(BaseModel):
    title: str
    description: str
    due_date: date
    status: str = "pending"

#used specifically for task creation input.
class TaskCreate(TaskBase):
    pass

#Used for task updates.
class TaskUpdate(TaskBase):
    pass

#Used for API responses when sending a task back to the user.
#Inherits all from TaskBase and adds id, which is generated by the database
#The id field represents the unique identifier (primary key) of the task, which is typically generated by the database (like SQLite or PostgreSQL) when you create a new record.

#Here's what's going on:
#TaskBase contains common fields that you expect to send to or receive from the API (like title, description, etc.).
#But when sending a response from your API (e.g., after creating or reading a task), the task will also include the id that the database generated.

#When returning this task as a response, you want to include the id, so the client knows which task it is referring to. That's why TaskResponse adds id: int to extend TaskBase
class TaskResponse(TaskBase):
    id: int

#This tells Pydantic to read data not just from dicts, but also from ORM objects like SQLAlchemy models.Necessary when returning SQLAlchemy model instances (e.g., Task) in responses.
class Config:
    orm_mode = True